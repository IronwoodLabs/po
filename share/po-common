#!/bin/bash
#     ______    ______
#    /      \  /      \
#   /██████  |/██████  |  The Future of po-util:
#   ██ |  ██ |██ |  ██ |
#   ██ |__██ |██ \__██ |      Refactored,
#   ██    ██/ ██    ██/       Modular,
#   ███████/   ██████/        Cross-Compatible
#   ██ |
#   ██ |
#   ██/  https://po-util.com

# COMMON

pause()
{
    read -rp "$*"
}

print_logo()
{
    if [ -t 1 ]; then
        LOGO="
$(tput setaf 6)$(tput bold)          ______    ______
$(tput setaf 6)$(tput bold)         /      \  /      \    $(tput sgr0)$TITLELINE
$(tput setaf 6)$(tput bold)        /██████  |/██████  |
$(tput setaf 6)$(tput bold)        ██ |  ██ |██ |  ██ |   $(tput sgr0)$USAGELINE
$(tput setaf 6)$(tput bold)        ██ |__██ |██ \__██ |     $(tput sgr0)$USAGELINE1
$(tput setaf 6)$(tput bold)        ██    ██/ ██    ██/      $(tput sgr0)$USAGELINE2
$(tput setaf 6)$(tput bold)        ███████/   ██████/       $(tput sgr0)$USAGELINE3
$(tput setaf 6)$(tput bold)        ██ |
$(tput setaf 6)$(tput bold)        ██ |                     $(tput sgr0)$HELPLINE
$(tput setaf 6)$(tput bold)        ██/  $(tput setaf 2)$TEXTLINE$(tput sgr0)
  "
    else
        LOGO="
          ______    ______
         /      \  /      \    $TITLELINE
        /██████  |/██████  |
        ██ |  ██ |██ |  ██ |   $USAGELINE
        ██ |__██ |██ \__██ |     $USAGELINE1
        ██    ██/ ██    ██/      $USAGELINE2
        ███████/   ██████/       $USAGELINE3
        ██ |
        ██ |                   $HELPLINE
        ██/  $TEXTLINE
  "
    fi
    echo "$LOGO"
}

blue_echo()
{
    if [ -t 1 ]; then
        echo "$(tput setaf 6)$(tput bold)$1$(tput sgr0)"
    else
        echo "$1"
    fi
}

green_echo()
{
    if [ -t 1 ]; then
        echo "$(tput setaf 2)$(tput bold)$1$(tput sgr0)"
    else
        echo "$1"
    fi
}

red_echo()
{
    if [ -t 1 ]; then
        echo "$(tput setaf 1)$(tput bold)$1$(tput sgr0)"
    else
        echo "$1"
    fi
}

find_objects() #Consolidated function
{
    if [ "$1" ]; then
        case "$1" in
            */)
                #has slash
                DIRECTORY="${1%?}"
            ;;
            *)
                #no slash
                DIRECTORY="$1"
            ;;
        esac
        if [ -d "$CWD/$DIRECTORY" ] && [ -d "$CWD/$DIRECTORY/firmware" ]; then
            DEVICESFILE="$CWD/$DIRECTORY/devices.txt"
            FIRMWAREDIR="$CWD/$DIRECTORY/firmware"
            PROJECTDIR="$CWD/$DIRECTORY"
            PROJECTNAME="${PROJECTDIR##*/}"
            TARGET_FILE="$PROJECTNAME-$DEVICE_TYPE"
            FIRMWAREBIN="$PROJECTDIR/bin/$TARGET_FILE.bin"
        elif [ -d "$DIRECTORY" ] && [ -d "$DIRECTORY/firmware" ]; then
            DEVICESFILE="$DIRECTORY/devices.txt"
            FIRMWAREDIR="$DIRECTORY/firmware"
            PROJECTDIR="$DIRECTORY"
            PROJECTNAME="${PROJECTDIR##*/}"
            TARGET_FILE="$PROJECTNAME-$DEVICE_TYPE"
            FIRMWAREBIN="$PROJECTDIR/bin/$TARGET_FILE.bin"
        elif [ -d "$CWD/$DIRECTORY" ] && [ -d "$CWD/firmware" ]; then
            DEVICESFILE="$CWD/$DIRECTORY/../devices.txt"
            FIRMWAREDIR="$CWD/$DIRECTORY"
            PROJECTDIR="$(cd $FIRMWAREDIR/.. && pwd)"
            PROJECTNAME="${PROJECTDIR##*/}"
            TARGET_FILE="$PROJECTNAME-$DEVICE_TYPE"
            FIRMWAREBIN="$PROJECTDIR/bin/$TARGET_FILE.bin"
        elif [ "$DIRECTORY" == "." ] && [ -f "$CWD/main.cpp" ]; then
            cd "$CWD/.." || exit
            DEVICESFILE="$PWD/devices.txt"
            FIRMWAREDIR="$CWD"
            PROJECTDIR="$PWD"
            PROJECTNAME="${PROJECTDIR##*/}"
            TARGET_FILE="$PROJECTNAME-$DEVICE_TYPE"
            FIRMWAREBIN="$PROJECTDIR/bin/$TARGET_FILE.bin"
        else
            echo
            red_echo "Firmware not found!"
            blue_echo "Please run \"po init DEVICE FOLDER\" to setup a project,
or choose a valid directory."
            echo
            exit
        fi
    else
        DEVICESFILE="$CWD/devices.txt"
        FIRMWAREDIR="$CWD/firmware"
        PROJECTDIR="$CWD"
        PROJECTNAME="${PROJECTDIR##*/}"
        TARGET_FILE="$PROJECTNAME-$DEVICE_TYPE"
        FIRMWAREBIN="$CWD/bin/$TARGET_FILE.bin"
    fi

    if [ -d "$FIRMWAREDIR" ]; then
        FIRMWAREDIR="$FIRMWAREDIR"
    else
        if [ "$DIRWARNING" == "true" ]; then
            echo
            red_echo "Firmware directory not found!"
            blue_echo "Please run \"po init DEVICE FOLDER\" to setup a project,
or choose a valid directory."
            echo
            exit
        fi
        FINDDIRFAIL="true"
    fi

    if [ -f "$DEVICESFILE" ]; then
        DEVICES="$(cat $DEVICESFILE)"
    else
        if [ "$DEVICEWARNING" == "true" ]; then
            echo
            red_echo "devices.txt not found!"
            blue_echo "You need to create a \"devices.txt\" file in your project directory with the names
of your devices on each line."
            green_echo "Example:"
            echo "    product1
    product2
    product3
            "
        fi
        FINDDEVICESFAIL="true"
    fi

    if [ -f "$FIRMWAREBIN" ]; then
        FIRMWAREBIN="$FIRMWAREBIN"
    else
        if [ "$BINWARNING" == "true" ]; then
            echo
            red_echo "Firmware Binary not found!"
            blue_echo "Perhaps you need to build your firmware?"
            echo
        fi
        FINDBINFAIL="true"
    fi
}

validateDevicePlatform()
{
  # Make sure we are using a valid Particle Device
    if [ "$1" == "photon" ] || [ "$1" == "P1" ] || [ "$1" == "electron" ] || [ "$1" == "pi" ] || [ "$1" == "core" ] || [ "$1" == "duo" ] || [ "$1" == "xenon" ] || [ "$1" == "argon" ] || [ "$1" == "boron" ]; then
        DEVICE_TYPE="$1"

        if [ "$DEVICE_TYPE" == "duo" ]; then
            cd "$FIRMWARE_DUO/firmware" || exit
            switch_branch "$BRANCH_DUO" &> /dev/null

        elif [ "$DEVICE_TYPE" == "pi" ]; then
            cd "$FIRMWARE_PI/firmware" || exit
            switch_branch "$BRANCH_PI"  &> /dev/null

        else
            cd "$FIRMWARE_PARTICLE/firmware" || exit
            switch_branch &> /dev/null
        fi

    else
        echo
        if [ "$1" == "redbear" ] || [ "$1" == "bluz" ] || [ "$1" == "oak" ]; then
            red_echo "This compound is not supported yet. Find out more here: https://git.io/vMTAw"
            echo
        fi
        red_echo "Please choose \"photon\", \"P1\", \"electron\", \"core\", \"pi\", or \"duo\",
    or choose a proper command."
        common_commands
        exit 1
    fi

    if [ "$DEVICE_TYPE" == "xenon" ]; then
        DFU_ADDRESS1="2b04:d00e"
        DFU_ADDRESS2="0x000d4000"
    fi
    if [ "$DEVICE_TYPE" == "argon" ]; then
        DFU_ADDRESS1="2b04:d00c"
        DFU_ADDRESS2="0x000d4000"
    fi
    if [ "$DEVICE_TYPE" == "boron" ]; then
        DFU_ADDRESS1="2b04:d00d"
        DFU_ADDRESS2="0x000d4000"
    fi
    if [ "$DEVICE_TYPE" == "photon" ]; then
        DFU_ADDRESS1="2b04:d006"
        DFU_ADDRESS2="0x080A0000"
    fi
    if [ "$DEVICE_TYPE" == "P1" ]; then
        DFU_ADDRESS1="2b04:d008"
        DFU_ADDRESS2="0x080A0000"
    fi
    if [ "$DEVICE_TYPE" == "electron" ]; then
        DFU_ADDRESS1="2b04:d00a"
        DFU_ADDRESS2="0x08080000"
    fi
    if [ "$DEVICE_TYPE" == "core" ]; then
        DFU_ADDRESS1="1d50:607f"
        DFU_ADDRESS2="0x08005000"
    fi
    if [ "$DEVICE_TYPE" == "duo" ]; then
        DFU_ADDRESS1="2b04:d058"
        DFU_ADDRESS2="0x80C0000"
    fi
}

build_message()
{
    green_echo "
Binary saved to $PROJECTNAME/$TARGET_FILE.bin
    "
}

dfu_open()
{
  DFU_LIST="$(dfu-util -l | xargs)"
  DFU_ADDRESS1="${DFU_LIST##*Found DFU: [}"
  DFU_ADDRESS1="${DFU_ADDRESS1%%]*}"

  if [[ "$DFU_ADDRESS1" =~ 2b04:d0* ]] || [[ "$DFU_ADDRESS1" =~ 1d50:* ]]; then
        blue_echo "
Already found a device in DFU mode!
"
        return
    fi

    if [ "$1" == "-d" ] || [ "$1" == "--device" ]; then
        if [[ -e "$2" ]]; then # Check if serial port is avaliable
            blue_echo "
Placing device $2 into DFU mode...
"
            $_stty "$2" "$DFUBAUDRATE" &> /dev/null
            if [[ "$(uname -s)" == "Linux" ]]; then
              stty -F "$2" 9600 &>/dev/null
            fi
            return
        else
            red_echo "
Could not find a device on $2
"
        fi
        return
fi

    if [ "$DEVICE_TYPE" == "duo" ]; then
        if [ -e "$MODEM_DUO" ]; then
            MODEM="$MODEM_DUO"
        else
            echo
            red_echo "Device not found!"
            echo
            blue_echo "Your device must be connected by USB."
            echo
            exit 1
        fi
    else
        if [ -e "$MODEM" ]; then
            MODEM="$MODEM"
        else
            echo
            red_echo "Device not found!"
            echo
            blue_echo "Your device must be connected by USB."
            echo
            exit 1
        fi
    fi

    if [ -e "$MODEM" ]; then
        $_stty "$MODEM" "$DFUBAUDRATE" &> /dev/null
        if [[ "$(uname -s)" == "Linux" ]]; then
          stty -F "$MODEM" 9600 &>/dev/null
        fi
    fi
}

serial_open()
{
    if [ "$1" == "-d" ] || [ "$1" == "--device" ]; then
        if [[ -e "$2" ]]; then # Check if serial port is avaliable
            MODEM="$2"
            blue_echo "
Placing device $2 into listening mode...
"
            $_stty "$2" "28800" &> /dev/null
            if [[ "$(uname -s)" == "Linux" ]]; then
              stty -F "$2" 9600 &>/dev/null
            fi
            return
        else
            red_echo "
Could not find a device on $2
"
        fi
        return
    fi

    if [ "$DEVICE_TYPE" == "duo" ]; then
        if [ -e "$MODEM_DUO" ]; then
            MODEM="$MODEM_DUO"
        else
            echo
            red_echo "Device not found!"
            echo
            blue_echo "Your device must be connected by USB."
            echo
            exit
        fi
    else
        if [ -e "$MODEM" ]; then
            MODEM="$MODEM"
        else
            echo
            red_echo "Device not found!"
            echo
            blue_echo "Your device must be connected by USB."
            echo
            exit
        fi
    fi

    if [ -e "$MODEM" ]; then
        $_stty "$MODEM" "28800" &> /dev/null
        if [[ "$(uname -s)" == "Linux" ]]; then
          stty -F "$MODEM" 9600 &>/dev/null
        fi
    fi
}

switch_branch()
{
    if [ "$1" ]; then
        if [ "$(git rev-parse --abbrev-ref HEAD)" != "$1" ]; then
            git checkout "$1" &> /dev/null
        fi
    else
        if [ "$(git rev-parse --abbrev-ref HEAD)" != "$BRANCH" ]; then
            git checkout "$BRANCH" &> /dev/null
        fi
    fi
}

common_commands() #List common commands
{
    echo
    blue_echo "Common commands include:
    build, flash, clean, ota, dfu, serial, init, config, setup, library"
    echo
}

cleanFirmware()
{
    if [ "$DEVICE_TYPE" == "duo" ]; then
        cd "$FIRMWARE_DUO"/firmware || exit
    else
        cd "$FIRMWARE_PARTICLE"/firmware || exit
    fi

    if [ "$DEVICE_TYPE" == "pi" ]; then
        switch_branch "feature/raspberry-pi"  &> /dev/null
    elif [ "$DEVICE_TYPE" == "duo" ]; then
        switch_branch "$BRANCH_DUO" &> /dev/null
    else
        switch_branch &> /dev/null
    fi

    git stash &> /dev/null
    echo
    if [ "$DEVICE_TYPE" == "pi" ]; then
        make clean -s 2>&1 /dev/null
    else
        make clean -s PLATFORM="$DEVICE_TYPE"  2>&1 /dev/null
    fi

    if [ "$PROJECTDIR/bin" != "$HOME/bin" ]; then
        rm -rf "${PROJECTDIR:?}/bin"
    fi

    blue_echo "Sucessfully cleaned."
    echo
}

store_build_parameters() # Keep track of $DEVICE_TYPE and $FIRMWAREDIR
{
    PARAMETERS="$HOME/.po-util/buildParameters"
    [[ -f "$PARAMETERS" ]] && . "$PARAMETERS"
    [[ "$STORED_DEVICE_TYPE" != "$DEVICE_TYPE" ]] && DEVICE_TYPE_CHANGED="true"
    [[ "$STORED_FIRMWAREDIR" != "$FIRMWAREDIR" ]] && FIRMWAREDIR_CHANGED="true"

    if [[ "$STORED_DEVICE_TYPE" != "$DEVICE_TYPE" ]] || [[ "$STORED_FIRMWAREDIR" != "$FIRMWAREDIR" ]]; then
        echo "STORED_DEVICE_TYPE=\"$DEVICE_TYPE\"" > "$PARAMETERS"
        echo "STORED_FIRMWAREDIR=\"$FIRMWAREDIR\"" >> "$PARAMETERS"
    fi

    if [[ "$DEVICE_TYPE_CHANGED" ]] && [[ "$FIRMWAREDIR_CHANGED" ]]; then
        blue_echo "Detected change of platform and project. Cleaning before attempting build..."
        cleanFirmware
    elif [[ "$DEVICE_TYPE_CHANGED" ]]; then
        blue_echo "Detected change of platform. Cleaning before attempting build..."
        cleanFirmware
    elif [[ "$FIRMWAREDIR_CHANGED" ]]; then
        blue_echo "Detected change of project. Cleaning before attempting build..."
        cleanFirmware
    fi
}

printSizes()
{
    if [[ "$DEVICE_TYPE" == "core" ]]; then
        FLASHTOTAL="110592"
        RAMTOTAL="20480"
    else
        FLASHTOTAL="125000"
        RAMTOTAL="60000"
    fi

    FLASH="$(( $1 + $2 ))"
    FLASHPERCENT=$(bc -l <<< "scale = 4; $FLASH / $FLASHTOTAL * 100")

    RAM="$(( $3 + $2 ))"
    RAMPERCENT=$(bc -l <<< "scale = 4; $RAM / $RAMTOTAL * 100")
    echo

    if [[ -t 1 ]]; then
        echo "$(tput setaf 6)$(tput bold)Flash Used:$(tput sgr0) $FLASH / $FLASHTOTAL    ${FLASHPERCENT%??} %"
        echo "$(tput setaf 6)$(tput bold)RAM Used:  $(tput sgr0) $RAM / $RAMTOTAL     ${RAMPERCENT%??} %"
    else
        echo "Flash Used: $FLASH / $FLASHTOTAL    ${FLASHPERCENT%??} %"
        echo "RAM Used:   $RAM / $RAMTOTAL     ${RAMPERCENT%??} %"
    fi
}

build_firmware()
{
    store_build_parameters

    TITLELINE="Building firmware..."
    USAGELINE="Build Parameters:"
    USAGELINE1="$DEVICE_TYPE"
    USAGELINE2="$(basename $PROJECTDIR)"
    TEXTLINE="po $DEVICE_TYPE build $USAGELINE2"
    print_logo

    if [ "$DEVICE_TYPE" == "duo" ]; then
        make all -s -C "$FIRMWARE_DUO/firmware/main" APPDIR="$FIRMWAREDIR" TARGET_FILE="$TARGET_FILE" TARGET_DIR="$PROJECTDIR/bin" PLATFORM="$DEVICE_TYPE" || exit
        cp "$FIRMWAREBIN" "$PROJECTDIR/$TARGET_FILE.bin"
    elif [ "$DEVICE_TYPE" == "pi" ]; then
        if hash docker &> /dev/null; then
            if docker run --rm -i -v $FIRMWARE_PI/firmware:/firmware -v $FIRMWAREDIR:/input -v $PROJECTDIR/bin:/output particle/buildpack-raspberrypi 2> echo; then
                echo
                blue_echo "Successfully built firmware for Raspberry Pi"
            else
                echo
                red_echo "Build failed."
                echo
                exit 1
            fi
        else
            red_echo "Docker not found. Please install docker to build firmware for Raspberry Pi"
            echo
            exit 1
        fi
    else
        make all -s -C "$FIRMWARE_PARTICLE/firmware/main" APPDIR="$FIRMWAREDIR" TARGET_DIR="$PROJECTDIR/bin" TARGET_FILE="$TARGET_FILE" PLATFORM="$DEVICE_TYPE" || exit
        cp "$FIRMWAREBIN" "$PROJECTDIR/$TARGET_FILE.bin"
    fi
}

ota() # device firmware
{
    DIRWARNING="true"
    BINWARNING="true"
    find_objects "$2"
    if [ "$FINDDIRFAIL" == "true" ] || [ "$FINDBINFAIL" == "true" ]; then
        exit
    fi

    if [ "$1" == "" ]; then
        echo
        red_echo "Please specify which device to flash ota."
        echo
        exit
    fi

    if [ "$1" == "--multi" ] || [ "$1" == "-m" ] || [ "$1" == "-ota" ]; then
        DEVICEWARNING="true"
        if [ "$FINDDEVICESFAIL" == "true" ] || [[ -z "$DEVICES" ]]; then
            cd "$CWD" || exit
            echo "" > devices.txt
            red_echo "
Please list your devices in devices.txt
            "
            exit 1
        fi
        for DEVICE in $DEVICES; do
            echo
            if particle list | grep "$DEVICE \[" | grep "online" &> /dev/null; then
                blue_echo "Flashing to device $DEVICE..."
                particle flash "$DEVICE" "$FIRMWAREBIN"
            else
                blue_echo "Skipping device $DEVICE since it's offline..."
            fi
        done
        echo
        exit
    fi
    echo
    blue_echo "Flashing to device $1..."
    particle flash "$1" "$FIRMWAREBIN" || {
        red_echo "Try using \"particle flash\" if you are having issues." && echo && exit 1
        }
    echo
}

config()
{
    if [[ ! -d "$HOME/.po-util" ]]; then
        mkdir -p "$HOME/.po-util"
    fi

    SETTINGS=~/.po-util/config
    BASE_DIR=~/.po-util/src
    FIRMWARE_PARTICLE=$BASE_DIR/particle
    FIRMWARE_DUO=$BASE_DIR/redbearduo
    FIRMWARE_PI=$BASE_DIR/pi
    BRANCH="release/stable"
    BRANCH_DUO="duo"
    BRANCH_PI="feature/raspberry-pi"
    MODEM_DUO=$MODEM_DUO

    echo BASE_DIR="$BASE_DIR" >> $SETTINGS
    echo PARTICLE_FIRMWARE_URL="$PARTICLE_FIRMWARE_URL" >> $SETTINGS
    echo FIRMWARE_PARTICLE="$FIRMWARE_PARTICLE" >> $SETTINGS
    echo FIRMWARE_DUO="$FIRMWARE_DUO" >> $SETTINGS
    echo FIRMWARE_PI="$FIRMWARE_PI" >> $SETTINGS
    echo "export PARTICLE_DEVELOP=1" >> $SETTINGS

    # Check for arguments

    # [ "$1" ] && BRANCH="$1" || BRANCH="release/stable"
    # [ "$2" ] && BRANCH_DUO="$2" || BRANCH_DUO="duo"
    # [ "$3" ] && AUTO_HEADER="$3" || AUTO_HEADER="false"

    if [ "$1" ] && [ ! "$2" ] && [ ! "$3" ]; then
      BRANCH="$1"
      echo BRANCH="$BRANCH" >> $SETTINGS

      BRANCH_DUO="duo"
      echo BRANCH_DUO="$BRANCH_DUO" >> $SETTINGS

      AUTO_HEADER="false"
      echo AUTO_HEADER="$AUTO_HEADER" >> $SETTINGS

      echo
      green_echo "Configured using the following arguments: $BRANCH $BRANCH_DUO $AUTO_HEADER"
    elif [ "$1" ] && [ "$2" ] && [ "$3" ]; then
        BRANCH="$1"
        echo BRANCH="$BRANCH" >> $SETTINGS

        BRANCH_DUO="$2"
        echo BRANCH_DUO="$BRANCH_DUO" >> $SETTINGS

        AUTO_HEADER="$3"
        echo AUTO_HEADER="$AUTO_HEADER" >> $SETTINGS

        echo
        green_echo "Configured using the following arguments: $1 $2 $3"
    else
        # Particle
        echo
        blue_echo "Which branch/tag of the Particle firmware would you like to use?
    You can find the branches at https://github.com/particle-iot/firmware/branches
    If you are unsure, please enter \"release/stable\""
        read -rp "Branch: " branch_variable
        BRANCH="$branch_variable"
        echo BRANCH="$BRANCH" >> $SETTINGS
        echo

        # RedBear DUO
        blue_echo "Which branch of the RedBear DUO firmware would you like to use?
    You can find the branches at https://github.com/redbear/Duo/branches
    If you are unsure, please enter \"duo\""
        read -rp "Branch: " branch_variable
        BRANCH_DUO="$branch_variable"
        echo BRANCH_DUO="$BRANCH_DUO" >> $SETTINGS

        echo
        blue_echo "Shoud po-util automatically add or remove headers when using libraries?"
        read -rp "(yes/no): " response
        if [ "$response" == "yes" ] || [ "$response" == "y" ] || [ "$response" == "Y" ]; then
            AUTO_HEADER="true"
        else
            AUTO_HEADER="false"
        fi
        echo AUTO_HEADER="$AUTO_HEADER" >> $SETTINGS
    fi

    if [[ -d "$FIRMWARE_DUO/firmware" ]]; then
      cd "$FIRMWARE_DUO/firmware" || exit
      switch_branch "$BRANCH_DUO" &> /dev/null
    fi

    if [[ -d "$FIRMWARE_PI/firmware" ]]; then
      cd "$FIRMWARE_PI/firmware" || exit
      switch_branch "$BRANCH_PI" &> /dev/null
    fi

    if [[ -d "$FIRMWARE_PARTICLE/firmware" ]]; then
      cd "$FIRMWARE_PARTICLE/firmware" || exit
      switch_branch &> /dev/null
    fi

    echo
}

getAddedLibs()
{
    find_objects "$1"
    if [ "$FINDDIRFAIL" == "true" ]; then
        exit
    fi

    for i in $FIRMWAREDIR/*/; do
        basename "$i"
    done
}

getLibURL()
{
    TOKEN="$(grep 'token' ~/.particle/particle.config.json | grep -oE '([0-Z])\w+' | grep -v 'token')"
    DATA=$(curl -sLH "Authorization: Bearer $TOKEN" "https://api.particle.io/v1/libraries/$1" | json_pp)
    LIBURL=$(echo "$DATA" | grep "url" | grep -oE '"((?:\\.|[^"\\])*)"' | grep "http" |  tr -d '"')
}

getFirmwareVersions()
{
  blue_echo "Finding Particle Device OS versions..."
  curl -s "https://api.github.com/repos/particle-iot/firmware/releases" | grep "tag_name" | grep -Po "v(.*?)(?=\")" | sort -V
  blue_echo "Use one of these versions with 'po config'"
}

getLib() # "$i" "$LIB_NAME"
{

    if [ "$2" == "" ]; then
        LIB_QUERY="$1"
    else
        LIB_QUERY="$2"
    fi

    if [[ -d "$LIBRARY/$LIB_QUERY" ]]; then
        echo
        blue_echo "Library $LIB_QUERY is already installed..."
    else

        if grep -q "://" <<<"$1"; then
            GIT_ARGS=( $1 )

            if [ "${GIT_ARGS[1]}" == "" ]; then
                git clone "${GIT_ARGS[0]}" || ( echo ; red_echo "Could not download Library. Please supply a valid URL to a git repository." )
            else
                git clone "${GIT_ARGS[0]}" "${GIT_ARGS[1]}" || ( echo ; red_echo "Could not download Library. Please supply a valid URL to a git repository." )
            fi
        else
            echo
            getLibURL "$LIB_QUERY"

            if echo "$LIBURL" | grep "github" &> /dev/null; then
                green_echo "$LIB_QUERY is availiable on GitHub!"
                read -rp "Would you prefer to download it this way? (yes/no): " answer

                if [ "$answer" == "yes" ] || [ "$answer" == "y" ] || [ "$answer" == "Y" ]; then
                    echo
                    cd "$LIBRARY" || exit
                    git clone "$LIBURL" "$LIB_QUERY"
                    echo
                    blue_echo "Downloaded $LIB_QUERY from GitHub."
                    return 0
                fi
            echo
        fi
            blue_echo "Attempting to download $LIB_QUERY using Particle Libraries 2.0..."
            echo
            cd "$LIBRARY/.." || exit
            particle library copy "$LIB_QUERY" || ( echo && particle library search "$LIB_QUERY" && echo && return 1 )
            echo
        fi
    fi
}

addLib()
{
    if [[ ! -d "$LIBRARY/$LIB_NAME" ]]; then # Try to automatically get library if not found
        getLib "$LIB_NAME" || ( echo && exit)
    fi

    if [ -f "$FIRMWAREDIR/$LIB_NAME.cpp" ] || [ -f "$FIRMWAREDIR/$LIB_NAME.h" ] || [ -d "$FIRMWAREDIR/$LIB_NAME" ]; then
        echo
        red_echo "Library $LIB_NAME is already added to this project..."
    else
        echo
        green_echo "Adding library $LIB_NAME to this project..."

        # Include library as a folder full of symlinks -- This is the new feature

        mkdir -p "$FIRMWAREDIR/$LIB_NAME"

        if [ -d "$LIBRARY/$LIB_NAME/firmware" ]; then
            ln -s $LIBRARY/$LIB_NAME/firmware/* "$FIRMWAREDIR/$LIB_NAME"
        else
            if [ -d "$LIBRARY/$LIB_NAME/src" ]; then
                ln -s $LIBRARY/$LIB_NAME/src/* "$FIRMWAREDIR/$LIB_NAME"
            else
                ln -s $LIBRARY/$LIB_NAME/* "$FIRMWAREDIR/$LIB_NAME"
            fi
        fi
    fi
}

addHeaders()
{
    [ "$1" ] && HEADER="$1" || HEADER="$LIB_NAME"
    if [ "$AUTO_HEADER" == "true" ]; then
        if (grep "#include \"$HEADER/$HEADER.h\"" "$FIRMWAREDIR/main.cpp") &> /dev/null; then
            echo "Already imported" &> /dev/null
        else
            echo "#include \"$HEADER/$HEADER.h\"" > "$FIRMWAREDIR/main.cpp.temp"
            cat "$FIRMWAREDIR/main.cpp" >> "$FIRMWAREDIR/main.cpp.temp"
            rm "$FIRMWAREDIR/main.cpp"
            mv "$FIRMWAREDIR/main.cpp.temp" "$FIRMWAREDIR/main.cpp"
        fi
    fi
}

rmHeaders()
{
    if [ "$AUTO_HEADER" == "true" ]; then
        if (grep "#include \"$1/$1.h\"" "$FIRMWAREDIR/main.cpp") &> /dev/null; then
            grep -v "#include \"$1/$1.h\"" "$FIRMWAREDIR/main.cpp" > "$FIRMWAREDIR/main.cpp.temp"
            rm "$FIRMWAREDIR/main.cpp"
            mv "$FIRMWAREDIR/main.cpp.temp" "$FIRMWAREDIR/main.cpp"
        fi

        if (grep "#include \"$1.h\"" "$FIRMWAREDIR/main.cpp") &> /dev/null; then # Backwards support
            grep -v "#include \"$1.h\"" "$FIRMWAREDIR/main.cpp" > "$FIRMWAREDIR/main.cpp.temp"
            rm "$FIRMWAREDIR/main.cpp"
            mv "$FIRMWAREDIR/main.cpp.temp" "$FIRMWAREDIR/main.cpp"
        fi

        if (grep "#include <$1.h>" "$FIRMWAREDIR/main.cpp") &> /dev/null; then # Other support
            grep -v "#include <$1.h>" "$FIRMWAREDIR/main.cpp" > "$FIRMWAREDIR/main.cpp.temp"
            rm "$FIRMWAREDIR/main.cpp"
            mv "$FIRMWAREDIR/main.cpp.temp" "$FIRMWAREDIR/main.cpp"
        fi
    fi
}

initProject()
{
    if [[ "$FOLDER" == "/"* ]]; then # Check for absolute or relative
        FIRMWAREDIR="$FOLDER/firmware"
        PROJECTDIR="$FOLDER"
    else
        FIRMWAREDIR="$CWD/$FOLDER/firmware"
        PROJECTDIR="$CWD/$FOLDER"
    fi

    if [ -d "$FIRMWAREDIR" ]; then
        echo
        green_echo "Directory is already Initialized!"
        echo "Would you like to regenerate it?"
        read -rp "(Firmware will not be touched.) (yes/no): " answer
        if [ "$answer" == "yes" ] || [ "$answer" == "y" ] || [ "$answer" == "Y" ]; then
            REGENERATE_DIR="true"
            echo
            blue_echo "Regenerating..."
        else
            blue_echo "Not Regenerating."
            echo
            exit
        fi
    fi

    if [[ "$REGENERATE_DIR" != "true" ]]; then
        mkdir -p "$FIRMWAREDIR"
        echo "#include \"Particle.h\"

void setup() // Put setup code here to run once
{

}

void loop() // Put code here to loop forever
{

}" > "$FIRMWAREDIR/main.cpp"

        cp "$HOME/.po-util/doc/po-README.md" "$PROJECTDIR/README.md"
    fi

    if [ "$DEVICE_TYPE" ]; then
          echo "---
cmd: po
args:
  - $DEVICE_TYPE
  - build
sh: false

targets:
  Build:
    atomCommandName: po:Build Particle Firmware Locally
    sh: false
    args:
      - $DEVICE_TYPE
      - build
    cmd: po
    keymap: ctrl-alt-1
    name: Build
  Flash:
    atomCommandName: po:Flash Particle Firmware Locally
    sh: false
    args:
      - $DEVICE_TYPE
      - flash
    cmd: po
    keymap: ctrl-alt-2
    name: Flash
  Clean:
    atomCommandName: po:Clean Particle Firmware Locally
    sh: false
    args:
      - $DEVICE_TYPE
      - clean
    cmd: po
    keymap: ctrl-alt-3
    name: Clean
  DFU:
    atomCommandName: po:Upload Particle Firmware Locally with DFU
    sh: false
    args:
      - $DEVICE_TYPE
      - dfu
    cmd: po
    keymap: ctrl-alt-4
    name: DFU
  OTA:
    atomCommandName: po:Upload Particle Firmware Locally with OTA
    sh: false
    args:
      - $DEVICE_TYPE
      - ota
      - --multi
    cmd: po
    keymap: ctrl-alt-5
    name: OTA" > "$PROJECTDIR/.atom-build.yml"

        mkdir -p "$PROJECTDIR/ci"

        echo 'dist: trusty
sudo: required
language: generic

script:
  - ci/travis.sh

cache:
  directories:
  - $HOME/.po-util' > "$PROJECTDIR/.travis.yml"

        echo "#!/bin/bash
bash <(curl -sL https://raw.githubusercontent.com/nrobinson2000/po/master/ci/ci-install)
po lib clean . -f &> /dev/null
yes \"no\" | po lib setup # change to \"yes\" to prefer libraries from GitHub
po $DEVICE_TYPE build" > "$PROJECTDIR/ci/travis.sh"

        chmod +x "$PROJECTDIR/ci/travis.sh"
    fi

    echo "bin/*
*.bin" > "$PROJECTDIR/.gitignore"
    cd "$PROJECTDIR" || exit

    if [[ "$REGENERATE_DIR" != "true" ]]; then
        git init &> /dev/null
        git add -A &> /dev/null
        git commit -m "Initial Commit by po" &> /dev/null
    fi

    echo
    green_echo "Directory initialized as a po-util project for $DEVICE_TYPE"
    echo
    exit
}

getLatestNodeVersion()
{
    curl -Ss https://nodejs.org/dist/ > node-result.txt
    grep "<a href=\"v" "node-result.txt" > node-new.txt
    tail -1 node-new.txt > node-oneline.txt
    sed -n 's/.*\"\(.*.\)\".*/\1/p' node-oneline.txt > node-version.txt
    NODEVERSION="$(cat node-version.txt)"
    NODEVERSION="${NODEVERSION%?}"
    INSTALLVERSION="node-$NODEVERSION"
    rm node-*.txt
}

getNodeLTSVersion()
{
    NODEVERSION=$(curl -sL https://nodejs.org/en/ | grep " LTS" | tail -1 | xargs)
    NODEVERSION=${NODEVERSION%% *}

    if [[ ${#NODEVERSION} -ge 7 ]] || [[ ${#NODEVERSION} -le 4 ]] ; then
        NODEVERSION="8.9.1" # Fallback
    fi

    NODEVERSION="v$NODEVERSION"
    INSTALLVERSION="node-$NODEVERSION"
}

installNodeVersion()
{
    blue_echo "Installing Node.js version $NODEVERSION..."
    curl -fsSLO "https://nodejs.org/dist/$NODEVERSION/$INSTALLVERSION.pkg"
    sudo installer -pkg node-*.pkg -target /
    rm -rf node-*.pkg
}

_help()
{
    TITLELINE="Copyright (C) 2018 Nathan D. Robinson"
    USAGELINE="Usage: po DEVICE_TYPE COMMAND DEVICE_NAME"
    USAGELINE1="     po DFU_COMMAND"
    USAGELINE2="     po install [full_install_path]"
    USAGELINE3="     po library LIBRARY_COMMAND"
    HELPLINE="Run \"man po\" for help."
    TEXTLINE="https://po-util.com"
    print_logo
    exit
}

_setup-atom()
{
    echo
    blue_echo "Installing Atom packages to enhance po-util experience..."
    echo
    apm install build minimap file-icons language-particle
    echo
    exit
}

_setup-mesh()
{
  echo
  blue_echo "Installing additional dependencies for Particle Mesh..."
  echo
  cd "$FIRMWARE_PARTICLE/firmware" || exit
  git submodule update --init
  echo
  exit
}

_config()
{
    if [ -f "$SETTINGS" ]; then
        rm "$SETTINGS"
    fi
    config "$1" "$2" "$3"
    exit
}

_info()
{
    echo "
$(tput bold)$(tput setaf 3)$(date)$(tput sgr0)

$(tput bold)$(tput setaf 2)- Configured Settings -$(tput sgr0)

$(tput bold)Firmware Versions:$(tput sgr0)
$(tput bold)Particle: $(tput setaf 6)$BRANCH$(tput sgr0)
$(tput bold)Duo: $(tput setaf 6)$BRANCH_DUO$(tput sgr0)

$(tput bold)DFU Baud Rate: $(tput setaf 6)$DFUBAUDRATE$(tput sgr0)
$(tput bold)Automatic Headers: $(tput setaf 6)$AUTO_HEADER$(tput sgr0)
    "
    PARAMETERS="$HOME/.po-util/buildParameters"
    if [[ -f "$PARAMETERS" ]]; then
        source "$PARAMETERS"
        echo "$(tput bold)Last Platform: $(tput setaf 6)$STORED_DEVICE_TYPE$(tput sgr0)
$(tput bold)Last Project: $(tput setaf 6) $STORED_FIRMWAREDIR$(tput sgr0)
        "
    fi
    exit
}

_get-added-libs()
{
    getAddedLibs "$1"
    exit
}

_init()
{
    if [[ ! $(validateDevicePlatform "$1") ]]; then
        DEVICE_TYPE="$1"
        FOLDER="$2"
    else
        blue_echo "
Please choose a device type next time :)"
        FOLDER="$1"
    fi
    initProject
}

_serial_monitor()
{
    if [ ! -e "$MODEM" ]; then # Don't run screen if device is not connected
        red_echo "No device connected!"
    else
        screen -S particle "$MODEM"
        screen -S particle -X quit
    fi
    exit
}

_dfu_open()
{
    dfu_open "$1" "$2"
    exit
}

_dfu_close()
{
  DFU_LIST="$(dfu-util -l | xargs)"
  DFU_ADDRESS1="${DFU_LIST##*Found DFU: [}"
  DFU_ADDRESS1="${DFU_ADDRESS1%%]*}"

  if [[ "$DFU_ADDRESS1" =~ 2b04:d0* ]] || [[ "$DFU_ADDRESS1" =~ 1d50:* ]]; then
    dfu-util -d "$DFU_ADDRESS1" -a 0 -i 0 -s 0x00010000:leave -D /dev/null &> /dev/null || dfu-util -d "$DFU_ADDRESS1" -a 0 -i 0 -s 0x080A0000:leave -D /dev/null &> /dev/null
  else
    echo
    red_echo "No Particle Devices in DFU mode found!"
    echo
  fi
  exit
}

_serial_open()
{
    serial_open "$1" "$2"
    exit
}

_serial_close()
{
    dfu_open "$1" "$2"
    sleep 1
    _dfu_close
}

_lib()
{
    LIBRARY="$HOME/.po-util/lib" # Create library directory
    if [ -d "$LIBRARY" ]; then # if it is not found.
        LIBRARY=~/.po-util/lib
    else
        mkdir -p "$LIBRARY"
    fi
}

_lib-clean()
{
    DIRWARNING="true"
    find_objects "$1"

    for file in $FIRMWAREDIR/*/; do
        file_base="$(basename $file)"

        if [ "$2" == "-f" ]; then
            rm -rf "${FIRMWAREDIR:?}/$file_base" &> /dev/null
            rmHeaders "$file_base"

        else
            if [[ -d "$LIBRARY/$file_base" ]]; then
                rm -rf "${FIRMWAREDIR:?}/$file_base" &> /dev/null # Transition
                rm "$FIRMWAREDIR/$file_base.h" &> /dev/null   # to new
                rm "$FIRMWAREDIR/$file_base.cpp" &> /dev/null # system
                rmHeaders "$file_base"
            fi
        fi
    done

    echo
    blue_echo "Removed all symlinks. This can be undone with \"po lib add\""
    echo
    exit
}

_lib-setup()
{
    DIRWARNING="true"
    find_objects "$1"
    cd "$LIBRARY" || exit

    while read i; do # Install and add required libs from libs.txt
        LIB_NAME="$(echo $i | awk '{ print $NF }' )"
        getLib "$i" "$LIB_NAME"
        addLib "$LIB_NAME" "$i"
        addHeaders "$LIB_NAME" "$i"
    done < "$PROJECTDIR/libs.txt"
    echo
    exit
}

_lib-get()
{
    cd "$LIBRARY" || exit

    if [ "$1" == "" ]; then # Install from libs.txt
        DIRWARNING="true"
        find_objects

            while read i; do
                LIB_NAME="$(echo $i | awk '{ print $NF }' )"
                getLib "$i" "$LIB_NAME"
            done < "$PROJECTDIR/libs.txt"
            echo
        else
            QUERY_ARGS="$(echo $1 $2 | xargs)"
            getLib "$QUERY_ARGS"
            echo
        fi
    exit
}

_lib-purge()
{
    if  [ -d "$LIBRARY/$1" ]; then
        echo
        read -rp "Are you sure you want to purge $1? (yes/no): " answer
        if [ "$answer" == "yes" ] || [ "$answer" == "y" ] || [ "$answer" == "Y" ]; then
            echo
            blue_echo "Purging library $1..."
            rm -rf "${LIBRARY:?}/$1"
            echo
            green_echo "Library $1 has been purged."
            echo
        else
            echo
            blue_echo "Aborting..."
            echo
            exit
        fi
    else
        red_echo "Library not found."
    fi
    exit
}

_lib-create()
{
    DIRWARNING="true"
    find_objects "$1"

    for file in $FIRMWAREDIR*; do
        file_base="${file%.*}"
        if [[ ! -d "$LIBRARY/$file_base" ]]; then
            if [ "$file_base" != "examples" ]; then
                mkdir -p "$LIBRARY/$file_base"
                echo
                blue_echo "Creating library $file_base..."
                cp "$FIRMWAREDIR/$file_base.h" "$LIBRARY/$file_base"
                cp "$FIRMWAREDIR/$file_base.cpp" "$LIBRARY/$file_base" &> /dev/null
            fi
        fi
    done
    echo
    exit
}

_lib-add()
{
    DIRWARNING="true"
    find_objects "$2"

    if [ "$1" == "" ]; then
        while read i; do ## Install and add required libs from libs.txt
            LIB_NAME="$(echo $i | awk '{ print $NF }' )"
            addLib
            addHeaders "$LIB_NAME"
        done < "$PROJECTDIR/libs.txt"
        echo
        exit
    fi

    if [ ! -d "$LIBRARY/$1" ]; then
        echo
        red_echo "Library $1 not found" ; echo ; exit
    fi
    LIB_NAME="$1"
    addLib
    #Add entries to libs.txt file
    LIB_URL="$( cd $LIBRARY/$1 && git config --get remote.origin.url )"
    echo "$LIB_URL $1" >> "$PROJECTDIR/libs.txt"
    addHeaders "$LIB_NAME"
    echo
    green_echo "Imported library $1"
    echo
    exit
}

_lib-rm()
{
    DIRWARNING="true"
    find_objects "$2"

    if [ "$1" == "" ]; then
        echo
        red_echo "Please choose a library to remove." ; exit
    fi

    if [ -f "$FIRMWAREDIR/$1.cpp" ] && [ -f "$FIRMWAREDIR/$1.h" ] || [ -d "$FIRMWAREDIR/$1" ]; then # Improve this to only check for [ -d "$FIRMWAREDIR/$1" ] once new system is adopted
        echo
        green_echo "Found library $1"
    else
        echo
        red_echo "Library $1 not found" ; echo ; exit
    fi

    if [ -d "$LIBRARY/$1" ]; then
        echo
        blue_echo "Library $1 is backed up, removing from project..."

        rm "$FIRMWAREDIR/$1.cpp" &> /dev/null # Transition
        rm "$FIRMWAREDIR/$1.h" &> /dev/null   # to new
        rm -rf "${FIRMWAREDIR:?}/$1" &> /dev/null # system

        grep -v "$1" "$PROJECTDIR/libs.txt" > "$PROJECTDIR/libs-temp.txt"
        rm "$PROJECTDIR/libs.txt"
        mv "$PROJECTDIR/libs-temp.txt" "$PROJECTDIR/libs.txt"

        if [ ! -s "$PROJECTDIR/libs.txt" ]; then
            rm "$PROJECTDIR/libs.txt"
        fi

        echo
        rmHeaders "$1"
        exit
    else
        echo
        read -rp "Library $1 is not backed up. Are you sure you want to remove it ? (yes/no): " answer
        if [ "$answer" == "yes" ] || [ "$answer" == "y" ] || [ "$answer" == "Y" ]; then
            echo
            blue_echo "Removing library $1..."

            rm "$FIRMWAREDIR/$1.cpp" &> /dev/null # Transition
            rm "$FIRMWAREDIR/$1.h" &> /dev/null   # to new
            rm -rf "${FIRMWAREDIR:?}/$1" &> /dev/null # system

            rmHeaders "$1"
            echo
            green_echo "Library $1 has been purged."
            exit
        else
            echo
            blue_echo "Aborting..."
            exit
        fi
    fi
    exit
}

_lib-ls()
{
    echo
    blue_echo "The following Particle libraries have been downloaded:"
    echo
    ls -m "$LIBRARY"
    echo
    exit
}

_lib-pack()
{
    DIRWARNING="true"
    find_objects "$1"
    if [ -d "$PROJECTDIR/$PROJECTNAME-packaged" ]; then
        rm -rf "$PROJECTDIR/$PROJECTNAME-packaged"
        rm -rf "$PROJECTDIR/$PROJECTNAME-packaged.zip"
    fi

    cp -rL "$FIRMWAREDIR" "$PROJECTDIR/$PROJECTNAME-packaged"
    zip -r "$PROJECTDIR/$PROJECTNAME-packaged.zip" "$PROJECTDIR/$PROJECTNAME-packaged" &> /dev/null
    echo
    blue_echo "Firmware has been packaged as \"$PROJECTNAME-packaged\" and \"$PROJECTNAME-packaged.zip\"
in \"$PROJECTDIR\". Feel free to use either when sharing your firmware."
    echo
    exit
}

_lib-help()
{
    TITLELINE="po library: The Particle Library manager for po"
    USAGELINE="Common commands:"
    USAGELINE1="clean, setup, get, install, purge, create, add,"
    USAGELINE2="remove, rm, list, ls, pack, export, update,"
    USAGELINE3="refresh, source, src, view-headers, examples"
    HELPLINE="Help: LIBRARY MANAGER of \"man po\""
    TEXTLINE="po lib help"
    print_logo
    exit
}

_lib-update()
{
    echo
    if [ "$(ls -1 $LIBRARY)" == "" ]; then
        red_echo "No libraries installed. Use \"po lib get\" to download some."
        exit
    fi

    green_echo "Checking for updates for libraries installed using git..."
    echo

    for OUTPUT in $(cd $LIBRARY && ls); do
        cd "$LIBRARY/$OUTPUT" || exit

        if [ ! -z "$(ls $LIBRARY/$OUTPUT/.git/ &> /dev/null )" ]; then # Only do git pull if it is a repository
            blue_echo "Updating library $OUTPUT..."
            git pull
            echo
        fi
    done
    exit
}

_lib-src()
{
    echo
    blue_echo "Listing installed libraries that are cloneable..."
    echo
    for OUTPUT in $(cd $LIBRARY && ls); do
        cd "$LIBRARY/$OUTPUT" || exit
        if [ -d "$LIBRARY/$OUTPUT/.git" ]; then # Only if it is a repository
            LIB_URL="$( cd $LIBRARY/$OUTPUT && git config --get remote.origin.url )"
            [[ -z "$LIB_URL" ]] && echo "$OUTPUT" || echo "$LIB_URL $OUTPUT"
            echo
        fi
    done
    exit
}


_lib-view-headers()
{
    DIRWARNING="true"
    find_objects "$1"
    for OUTPUT in $FIRMWAREDIR/*/; do
        echo
        blue_echo "$OUTPUT"
        for HEADER in $OUTPUT*; do
            HEADER="$(basename $HEADER)"

            if [[ "$HEADER" == "$(basename $OUTPUT)" ]]; then
                continue
            fi

            echo
            green_echo "$HEADER"

            for INCLUDE in $(grep -w "#include" "$OUTPUT$HEADER"); do
                if [ "$INCLUDE" != "#include" ]; then
                    RAW_LIB_NAME=${INCLUDE%?}
                    RAW_LIB_NAME=${RAW_LIB_NAME#?}
                    echo "$RAW_LIB_NAME"
                fi
            done
        done
    done
    echo
    exit
}

_lib-ex-help()
{
    TITLELINE="po lib ex: Particle Library Example Manager"
    USAGELINE="Usage: po lib ex ls LIBRARY_NAME"
    USAGELINE1="        - List the examples in a library"
    USAGELINE2="     po lib ex load LIBRARY_NAME"
    USAGELINE3="        - Load an example from a library"
    HELPLINE="Help: LIBRARY EXAMPLE MANAGER of \"man po\""
    TEXTLINE="po lib ex"
    print_logo
    exit
}

_lib-ex-ls()
{
    if [ "$1" == "" ]; then
        echo
        red_echo "Please choose a library."
        echo
        exit
    fi

    if [ -d "$LIBRARY/$1/examples" ]; then
        echo
        blue_echo "Found the following $1 examples:"
        echo
        ls -m "$LIBRARY/$1/examples"
        echo
        exit
    else
        echo
        red_echo "Could not find any $1 examples."
        echo
        exit
    fi
}

_lib-ex-load()
{
    DATE=$(date +%Y-%m-%d)
    TIME=$(date +"%H-%M")
    find_objects "$CWD"

    if [ -d "$LIBRARY/$1/examples/$2" ]; then
        if [ "$2" == "" ]; then
            echo
            red_echo "Please choose a valid example. Use \"po lib ex ls libraryName\" to find examples."
            echo
            exit
        fi
    else
        echo
        red_echo "Please choose a valid example. Use \"po lib ex ls libraryName\" to find examples."
        echo
        exit
    fi

    cp "$FIRMWAREDIR/main.cpp" "$FIRMWAREDIR/main.cpp.$DATE-$TIME.txt"
    rm "$FIRMWAREDIR/main.cpp"

    if [ -d "$LIBRARY/$1/examples/$2" ]; then
        if [ -f "$LIBRARY/$1/examples/$2/$2.cpp" ]; then
            cp "$LIBRARY/$1/examples/$2/$2.cpp" "$FIRMWAREDIR/main.cpp"
        fi

        if [ -f "$LIBRARY/$1/examples/$2/$2.ino" ]; then
            cp "$LIBRARY/$1/examples/$2/$2.ino" "$FIRMWAREDIR/main.cpp"
        fi

        if [ -f "$PROJECTDIR/libs.txt" ]; then
            while read i; do ## Install and add required libs from libs.txt
                LIB_NAME="$(echo $i | awk '{ print $NF }' )"
                addLib
                rmHeaders "$LIB_NAME"
                addHeaders "$LIB_NAME"
            done < "$PROJECTDIR/libs.txt"

        else # get dependencies

            grep "#include" "$FIRMWAREDIR/main.cpp" | grep -v "Particle" | grep -v "application" > "$PROJECTDIR/libs.temp.txt"
            sed 's/^[^"]*"//; s/".*//' "$PROJECTDIR/libs.temp.txt" > "$PROJECTDIR/libs.temp1.txt"

            while read i; do ## remove the < >
                k="#include <"
                j="${i#${k}}"
                j="${j%>}"
                grep -v "${k}$j>" "$FIRMWAREDIR/main.cpp" > "$FIRMWAREDIR/main.cpp.temp"
                rm "$FIRMWAREDIR/main.cpp"
                mv "$FIRMWAREDIR/main.cpp.temp" "$FIRMWAREDIR/main.cpp"
                echo "$j" >> "$PROJECTDIR/libs.temp2.txt"
            done < "$PROJECTDIR/libs.temp1.txt"

            rm "$PROJECTDIR/libs.temp.txt"

            while read i; do ## remove .h
                echo "${i%.h}" >> "$PROJECTDIR/libs.temp.txt"
            done < "$PROJECTDIR/libs.temp2.txt"

            rm "$PROJECTDIR/libs.temp1.txt"
            rm "$PROJECTDIR/libs.temp2.txt"

            while read i; do ## create libs.txt
                LIB_NAME="$i"
                if [[ -d "$LIBRARY/$LIB_NAME" ]]; then
                    if [ -d "$LIBRARY/$LIB_NAME/.git" ]; then # Only if it is a repository
                        LIB_URL="$( cd $LIBRARY/$LIB_NAME && git config --get remote.origin.url )"
                        LIB_STR="$LIB_URL $LIB_NAME"
                        echo "$LIB_STR" >> "$PROJECTDIR/libs.txt"
                    fi
                else
                    echo "$LIB_NAME" >> "$PROJECTDIR/libs.txt"
                fi
            done < "$PROJECTDIR/libs.temp.txt"

            rm "$PROJECTDIR/libs.temp.txt"

            awk '!a[$0]++' "$PROJECTDIR/libs.txt" > "$PROJECTDIR/libs.temp.txt"
            rm "$PROJECTDIR/libs.txt"
            mv "$PROJECTDIR/libs.temp.txt" "$PROJECTDIR/libs.txt"

            while read i; do ## Install and add required libs from libs.txt
                LIB_NAME="$(echo $i | awk '{ print $NF }' )"
                addLib
                rmHeaders "$LIB_NAME"
                addHeaders "$LIB_NAME"
            done < "$PROJECTDIR/libs.txt"
        fi

        echo
        blue_echo "Loaded example $2 from $1."
        echo
        green_echo "Original main.cpp has been backed up as main.cpp.$DATE-$TIME.txt"
        echo

    else
        echo
        red_echo "Example $2 not found."
        echo
    fi
    exit
}

_create()
{
    _PLATFORM="$1"
    _NAME="$2"

    if validateDevicePlatform "$_PLATFORM" && [[ ! -z "$_NAME" ]]; then
        [[ ! -d "$HOME/.po-util/projects" ]] && mkdir -p "$HOME/.po-util/projects"
        FOLDER="$HOME/.po-util/projects/$_NAME"
        initProject
    fi
    echo
    exit
}

_open()
{
    PROJECT_PATH="$HOME/.po-util/projects/$1"
    echo
    echo "Opening $PROJECT_PATH in a subshell.."
    echo
    cd "$PROJECT_PATH" || exit
    exec bash
    exit
}

_setup()
{
    echo
    pause "Connect your device and put it into Listening mode. Press [ENTER] to continue..."
    particle serial identify
    if [ "$DEVICE_TYPE" != "electron" ]; then
        echo
        pause "We will now connect your $DEVICE_TYPE to Wi-Fi. Press [ENTER] to continue..."
        echo
        particle serial wifi
    fi
    echo
    blue_echo "You should now be able to claim your device. Please run
\"particle device add Device_ID\", using the Device_ID we found above."
    echo
    exit
}

_init-device()
{
    FOLDER="$1"
    initProject
}

_dfu()
{
    BINWARNING="true"
    find_objects "$1"
    if [ "$FINDBINFAIL" == "true" ]; then
        exit
    fi
    dfu_open
    sleep 1
    echo
    blue_echo "Flashing $FIRMWAREBIN with dfu-util..."
    echo
    dfu-util -d "$DFU_ADDRESS1" -a 0 -i 0 -s "$DFU_ADDRESS2":leave -D "$FIRMWAREBIN" || ( echo && red_echo "Device not found." && echo && exit 1 )
    echo
    blue_echo "Firmware successfully flashed to $DEVICE_TYPE on $MODEM"
    echo
    exit
}

_upgrade()
{
  if [ "$DEVICE_TYPE" == "photon" ] || [ "$DEVICE_TYPE" == "P1" ] || [ "$DEVICE_TYPE" == "electron" ] || [ "$DEVICE_TYPE" == "xenon" ] || [ "$DEVICE_TYPE" == "argon" ] || [ "$DEVICE_TYPE" == "boron" ]; then
        pause "Connect your device and put into DFU mode. Press [ENTER] to continue..."

        cd "$FIRMWARE_PARTICLE/firmware/modules" || exit
        make clean all PLATFORM="$DEVICE_TYPE" program-dfu

        cd "$FIRMWARE_PARTICLE/firmware" && git stash || exit
        sleep 1
        dfu-util -d $DFU_ADDRESS1 -a 0 -i 0 -s $DFU_ADDRESS2:leave -D /dev/null &> /dev/null
        exit
    else
        if [ "$DEVICE_TYPE" == "duo" ]; then
            pause "Connect your device and put into DFU mode. Press [ENTER] to continue..."

            cd "$FIRMWARE_DUO/firmware/modules" || exit
            make clean all PLATFORM="$DEVICE_TYPE" program-dfu

            cd "$FIRMWARE_DUO/firmware" && git stash || exit
            sleep 1
            dfu-util -d $DFU_ADDRESS1 -a 0 -i 0 -s $DFU_ADDRESS2:leave -D /dev/null &> /dev/null

            exit
        fi
        red_echo "
This command can only be used to update the system firmware for
photon, P1, electron, or duo.
"

        if [ "$DEVICE_TYPE" == "core" ]; then
            blue_echo "On the Spark Core, firmware is monolithic, meaning that the system
firmware is packaged with the user firmware."
            echo
        fi

        if [ "$DEVICE_TYPE" == "pi" ]; then
            blue_echo "Raspberry Pi is still in beta and you must be registered in the beta
to use Particle on Raspberry Pi.

To update the \"system firmware\" on Raspberry Pi, simply re-install
particle-agent. https://git.io/vynBd
"
        fi
        exit
    fi
}

_clean()
{
    DIRWARNING="true"
    find_objects "$1"
    if [ "$FINDDIRFAIL" == "true" ]; then
        exit
    fi
    git stash &> /dev/null
    echo
    blue_echo "Cleaning firmware..."
    echo
    if [ "$DEVICE_TYPE" == "pi" ]; then
        make clean -s 2>&1 /dev/null
    else
        make clean -s PLATFORM="$DEVICE_TYPE"  2>&1 /dev/null
    fi

    if [ "$PROJECTDIR/bin" != "$HOME/bin" ]; then
        rm -rf "${PROJECTDIR:?}/bin"
    fi
    blue_echo "Sucessfully cleaned."
    echo
}

_build()
{
    DIRWARNING="true"
    find_objects "$1"
    if [ "$FINDDIRFAIL" == "true" ]; then
        exit
  fi
    build_firmware || exit

    if [[ "$DEVICE_TYPE" != "pi" ]]; then
        SIZES=$(arm-none-eabi-size "$PROJECTDIR/bin/$TARGET_FILE.elf" | tail -1)
        printSizes $SIZES
    fi

    build_message
}

_flash()
{
  _build "$1"

  if [ "$DEVICE_TYPE" == "pi" ]; then
    ota "-m"
    exit
  fi

  green_echo "Building firmware was successful! Flashing with dfu-util..."
  echo
  dfu_open
  sleep 1

  dfu-util -d "$DFU_ADDRESS1" -a 0 -i 0 -s "$DFU_ADDRESS2":leave -D "$FIRMWAREBIN"
  echo
}
