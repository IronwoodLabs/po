#!/bin/bash
#     ______    ______
#    /      \  /      \
#   /██████  |/██████  |  The Future of po-util:
#   ██ |  ██ |██ |  ██ |
#   ██ |__██ |██ \__██ |      Refactored,
#   ██    ██/ ██    ██/       Modular,
#   ███████/   ██████/        Cross-Compatible
#   ██ |
#   ██ |
#   ██/  https://po-util.com

# MAC

_install()
{
    # Don't let po-util install under root
    if [[ "$USER" == "root" ]]; then
        red_echo "
    Please do not install po-util using sudo or root.
    Install it using your preferred account on your system.

    You will be prompted for your password to use sudo
    during the installation when appropriate.
    "
        exit
    fi

    # create doc dir
    [ -d "$HOME/.po-util/doc" ] || mkdir -p "$HOME/.po-util/doc"  # If BASE_DIR does not exist, create it

    # Download po-README.md
    curl -fsSLo ~/.po-util/doc/po-README.md https://raw.githubusercontent.com/nrobinson2000/po/master/po-README.md

    # Download particle.mk
    curl -fsSLo ~/.po-util/src/particle.mk https://raw.githubusercontent.com/nrobinson2000/po/master/share/particle.mk

    # Check to see if we need to override the install directory.
    if [ "$1" ] && [ "$1" != "$BASE_DIR" ]; then
        BASE_DIR="$1"
        echo BASE_DIR="$BASE_DIR" > "$SETTINGS"
    fi

    # create base dir
    [ -d "$BASE_DIR" ] || mkdir -p "$BASE_DIR"  # If BASE_DIR does not exist, create it
    # create Particle dir
    [ -d "$FIRMWARE_PARTICLE" ] || mkdir -p "$FIRMWARE_PARTICLE"  # If FIRMWARE_PARTICLE does not exist, create it
    # create redbearduo dir
    [ -d "$FIRMWARE_DUO" ] || mkdir -p "$FIRMWARE_DUO"  # If FIRMWARE_DUO does not exist, create it
    # create raspberry-pi dir
    [ -d "$FIRMWARE_PI" ] || mkdir -p "$FIRMWARE_PI"  # If FIRMWARE_PI does not exist, create it

    # Enable bash completion
    grep "source /usr/local/etc/bash_completion.d/po" "$HOME/.profile" &> /dev/null|| echo "source /usr/local/etc/bash_completion.d/po" >> "$HOME/.profile"
    grep "source /usr/local/etc/bash_completion.d/po" "$HOME/.bash_profile" &> /dev/null || echo "source /usr/local/etc/bash_completion.d/po" >> "$HOME/.bash_profile"
    grep "source /usr/local/etc/bash_completion.d/po" "$HOME/.bashrc" &> /dev/null || echo "source /usr/local/etc/bash_completion.d/po" >> "$HOME/.bashrc"

    LIBRARY=~/.po-util/lib # Create library directory
    if [ -d "$LIBRARY" ]; then    # if it is not found.
        LIBRARY=~/.po-util/lib
    else
        mkdir -p "$LIBRARY"
    fi

    if [ ! -f "$LIBRARY/../project.properties" ]; then # Structure library directory
        cd "$LIBRARY/.." || exit
        echo "name=particle-lib" > "project.properties"
    fi

    # clone Particle firmware repository
    cd "$FIRMWARE_PARTICLE" || exit
    echo
    blue_echo "Installing Particle firmware from Github..."
    git clone "$PARTICLE_FIRMWARE_URL" "firmware" || ( cd firmware && git stash &> /dev/null && git fetch )

    # clone RedBear DUO firmware repository
    cd "$FIRMWARE_DUO" || exit
    echo
    blue_echo "Installing RedBear Duo firmware from Github..."
    git clone https://github.com/redbear/firmware.git || ( cd firmware && git stash &> /dev/null && git fetch )

    # clone Particle-Pi firmware repository
    cd "$FIRMWARE_PI" || exit
    echo
    blue_echo "Installing Particle-Pi firmware from Github..."
    git clone https://github.com/particle-iot/firmware.git || ( cd firmware && git stash &> /dev/null && git fetch )

    echo

    # Install ARM toolchain
    blue_echo "Installing ARM toolchain..."
    brew update
    brew install gcc-arm-none-eabi-53 dfu-util grep
    brew link grep

    #getLatestNodeVersion

    getNodeLTSVersion # Automatically get the latest LTS release of Node.js

    if [ "$(hash node &> /dev/null && node -v)" == "$NODEVERSION" ]; then
        echo
        blue_echo "Node.js version $NODEVERSION is already installed."
    else
        echo
        installNodeVersion
    fi

    # Tracking
    SYSTEM_IP="$(curl -sS ipinfo.io/ip)"
    KERNEL="$(uname -s)"
    curl -sS "https://po-util-tracker.herokuapp.com/install/$USER/$HOSTNAME@$KERNEL/$BASH_VERSION@$SYSTEM_IP" &> /dev/null &

    GIT_NAME="$(git config --global user.name | sed 's/ /%20/g')"
    GIT_EMAIL="$(git config --global user.email)"

    if [[ "$GIT_NAME" != "" ]] || [[ "$GIT_EMAIL" != "" ]]; then
        curl -sS "https://po-util-tracker.herokuapp.com/git/$GIT_NAME/$GIT_EMAIL/$BASH_VERSION@$SYSTEM_IP" &> /dev/null &
    fi

    # Install particle-cli
    echo
    blue_echo "Installing particle-cli..."
    sudo npm install -g --unsafe-perm node-pre-gyp npm particle-cli

    green_echo "
    Thank you for installing po-util. Be sure to check out https://po-util.com
    if you have any questions, suggestions, comments, or problems. You can use
    the message button in the bottom right corner of the site to send me a
    message. If you need to update po-util just run \"po update\" to download
    the latest versions of po-util, Particle Firmware and particle-cli, or run
    \"po install\" to update all dependencies.
    "
    exit
}

_list()
{
    for device in /dev/cu.usbmodem*; do
        if [[ ! -e $device ]]; then
            echo
            red_echo "No devices found!"
            echo
            blue_echo "Your device(s) must be connected by USB."
            echo
            exit
        fi
    done

    blue_echo "
Found the following Particle Devices:
    "

    RAW_LOG="$(system_profiler SPUSBDataType 2> /dev/null)"

    for device in /dev/cu.usbmodem*; do
        if [[ -e $device ]]; then
            LOCATION=$(echo "$device" | tail -c +17)
            LOCATION=${LOCATION%?}
            LOCNUM=$(echo "$RAW_LOG" | sed -n "/$LOCATION/=")
            DEVNUM=$(($LOCNUM-8))
            PLATFORM=$(echo "$RAW_LOG" | sed "$DEVNUM!d")
            PLATFORM=$(echo $PLATFORM | xargs)
            echo "$(tput bold)$(tput setaf 3)$PLATFORM$(tput sgr0) $device
            "
        fi
    done
    exit
}

_update()
{
    SYSTEM_IP="$(curl -sS ipinfo.io/ip)"
    KERNEL="$(uname -s)"
    curl -sS "https://po-util-tracker.herokuapp.com/update/$USER/$HOSTNAME@$KERNEL/$SYSTEM_IP" &> /dev/null &

    if [ "$1" == "particle" ]; then # update just particle firmware
        echo
        blue_echo "Updating Particle firmware..."
        cd "$FIRMWARE_PARTICLE/firmware" || exit
        git stash &> /dev/null
        switch_branch &> /dev/null
        git fetch
        echo
        exit
    fi

    if [ "$1" == "duo" ]; then # Update just duo firmware
        echo
        blue_echo "Updating RedBear DUO firmware.."
        cd "$FIRMWARE_DUO/firmware" || exit
        git stash &> /dev/null
        switch_branch "$BRANCH_DUO" &> /dev/null
        git fetch
        echo
        exit
    fi

    if [ "$1" == "pi" ]; then # update just pi firmware
        echo
        blue_echo "Updating Particle-Pi firmware..."
        cd "$FIRMWARE_PI/firmware" || exit
        git stash &> /dev/null
        switch_branch "$BRANCH_PI" &> /dev/null
        git fetch
        echo
        exit
    fi

    #update everything if not specified
    echo
    blue_echo "Updating Particle firmware..."
    cd "$FIRMWARE_PARTICLE/firmware" || exit
    git stash &> /dev/null
    switch_branch &> /dev/null
    git fetch

    echo
    blue_echo "Updating RedBear DUO firmware..."
    cd "$FIRMWARE_DUO/firmware" || exit
    git stash &> /dev/null
    switch_branch "$BRANCH_DUO" &> /dev/null
    git fetch

    echo
    blue_echo "Updating Particle-Pi firmware..."
    cd "$FIRMWARE_PI/firmware" || exit
    git stash &> /dev/null
    switch_branch "$BRANCH_PI" &> /dev/null
    git fetch

    echo
    blue_echo "Updating particle-cli..."
    sudo npm update -g particle-cli

    echo
    blue_echo "Updating po-util.."
    brew update
    brew upgrade po 2> /dev/null

    rm -f ~/.po-util/doc/po-README.md
    curl -fsSLo ~/.po-util/doc/po-README.md https://raw.githubusercontent.com/nrobinson2000/po/master/po-README.md
    echo
    exit
}

_stty="stty -f"

# Configuration file is created at "~/.po-util/config"
SETTINGS=~/.po-util/config
BASE_DIR=~/.po-util/src
PARTICLE_FIRMWARE_URL="https://github.com/particle-iot/device-os.git"
FIRMWARE_PARTICLE=$BASE_DIR/particle
FIRMWARE_DUO=$BASE_DIR/redbearduo
FIRMWARE_PI=$BASE_DIR/pi
BRANCH="release/stable"
BRANCH_DUO="duo"
BRANCH_PI="feature/raspberry-pi"
DFUBAUDRATE=14400
CWD="$PWD" # Global Current Working Directory variable

for modem in /dev/cu.usbmodem*; do
    MODEM="$modem"
    MODEM_DUO="$modem"
done
