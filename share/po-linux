#!/bin/bash

# LINUX

_install()
{
  if [ "$2" == "basic" ];
then
BASIC_INSTALL="true"
fi

# Don't let po-util install under root
if [[ "$USER" == "root" ]]; then
  red_echo "
Please do not install po-util using sudo or root.
Install it using your preferred account on your system.

You will be prompted for your password to use sudo
during the installation when appropriate.
"
exit
fi

  if [ "$(uname -s)" == "Darwin" ]; #Quit if on macOS
  then
    echo
    blue_echo "You are on macOS. This installer is for Linux.
Please try the universal installer:

bash <(curl -sL get.po-util.com)
"
exit
  fi

  if ! hash curl 2>/dev/null;
  then
    red_echo "
po-util requires curl for the installation and updating of various tools.
Please install \"curl\" with your package manager.
"
    exit
  fi

  sudo curl -fsSLo /usr/local/share/po-common https://raw.githubusercontent.com/nrobinson2000/po/master/share/po-common
  sudo curl -fsSLo /usr/local/share/po-linux https://raw.githubusercontent.com/nrobinson2000/po/master/share/po-linux
  sudo curl -fsSLo /usr/local/bin/po https://raw.githubusercontent.com/nrobinson2000/po/master/bin/po
  sudo chmod +x /usr/local/bin/po

  blue_echo "Installing bash completion for po..."
  sudo curl -fsSLo /etc/bash_completion.d/po https://raw.githubusercontent.com/nrobinson2000/homebrew-po/master/completion/po

  # create doc dir
  [ -d "$HOME/.po-util/doc" ] || mkdir -p "$HOME/.po-util/doc"  # If BASE_DIR does not exist, create it

  # Download po-util-README.md
  curl -fsSLo ~/.po-util/doc/po-util-README.md https://raw.githubusercontent.com/nrobinson2000/po-util/master/po-util-README.md

  # Check to see if we need to override the install directory.
  if [ "$1" ] && [ "$1" != $BASE_DIR ]
  then
    BASE_DIR="$1"
    echo BASE_DIR="$BASE_DIR" > $SETTINGS
  fi

  # create base dir
  [ -d "$BASE_DIR" ] || mkdir -p "$BASE_DIR"  # If BASE_DIR does not exist, create it
  # create Particle dir
  [ -d "$FIRMWARE_PARTICLE" ] || mkdir -p "$FIRMWARE_PARTICLE"  # If FIRMWARE_PARTICLE does not exist, create it
  # create redbearduo dir
  [ -d "$FIRMWARE_DUO" ] || mkdir -p "$FIRMWARE_DUO"  # If FIRMWARE_DUO does not exist, create it
  # create raspberry-pi dir
  [ -d "$FIRMWARE_PI" ] || mkdir -p "$FIRMWARE_PI"  # If FIRMWARE_PI does not exist, create it

  LIBRARY=~/.po-util/lib # Create library directory
  if [ -d "$LIBRARY" ];    # if it is not found.
  then
    LIBRARY=~/.po-util/lib
  else
    mkdir -p "$LIBRARY"
  fi

  if [ ! -f "$LIBRARY/../project.properties" ]; # Structure library directory
  then
    cd "$LIBRARY/.." || exit
    echo "name=particle-lib" > "project.properties"
  fi

  # clone Particle firmware repository
  cd "$FIRMWARE_PARTICLE" || exit

  if hash git 2>/dev/null;
  then
    NOGIT="false"
    echo
    blue_echo "Installing Particle firmware from Github..."
    git clone https://github.com/spark/firmware.git
  else
    NOGIT="true"
  fi

  # clone RedBear DUO firmware repository
  cd "$FIRMWARE_DUO" || exit

  if hash git 2>/dev/null;
  then
    NOGIT="false"
    echo
    blue_echo "Installing RedBear Duo firmware from Github..."
    git clone https://github.com/redbear/firmware.git
  else
    NOGIT="true"
  fi

  # clone Particle-Pi firmware repository
  cd "$FIRMWARE_PI" || exit

  if hash git 2>/dev/null;
  then
    NOGIT="false"
    echo
    blue_echo "Installing Particle-Pi firmware from Github..."
    git clone https://github.com/spark/firmware.git
  else
    NOGIT="true"
  fi

    if hash apt-get 2>/dev/null; # Test if on a Debian-based system
    then
      DISTRO="deb" # Debian
      INSTALLER="apt-get install -y"
    else
      if hash yum 2>/dev/null;
      then
      DISTRO="rpm" # Fedora / Centos Linux
      INSTALLER="yum -y install"
    else
      if hash pacman 2>/dev/null; # Arch Linux
      then
        DISTRO="arch"
        INSTALLER="pacman -Syu"
      fi
    fi
  fi

    cd "$BASE_DIR" || exit

    echo

    # Install dependencies

    if hash arm-none-eabi-gcc 2>/dev/null; #Test for arm-none-eabi-gcc
    then
      blue_echo "ARM toolchain version $GCC_ARM_VER is already installed... Continuing..."
    else

    blue_echo "Installing ARM toolchain and dependencies locally in $BINDIR/gcc-arm-embedded/..."
    mkdir -p $BINDIR/gcc-arm-embedded && cd "$_" || exit

    if [ -d "$GCC_ARM_VER" ]; #
    then
        echo
        blue_echo "ARM toolchain version $GCC_ARM_VER is already downloaded... Continuing..."
    else
        curl -L -o $GCC_ARM_VER.tar.bz2 $GCC_ARM_URL #Update to v5.3
        echo
        blue_echo "Extracting ARM toolchain..."
        tar xjf $GCC_ARM_VER.tar.bz2
    fi
  fi

    if [ "$DISTRO" != "arch" ];
    then

    # getLatestNodeVersion
    NODEVERSION="v8.9.1"

    if [ "$(node -v)" == "$NODEVERSION" ];
    then
        blue_echo "Node.js version $NODEVERSION is already installed."
    else
        # MESSAGE="Installing Node.js version $NODEVERSION..." ; blue_echo
        curl -Ss https://api.github.com/repos/nodesource/distributions/contents/"$DISTRO" | grep "name"  | grep "setup_"| grep -v "setup_iojs"| grep -v "setup_dev" > node-files.txt
        tail -1 node-files.txt > node-oneline.txt
        sed -n 's/.*\"\(.*.\)\".*/\1/p' node-oneline.txt > node-version.txt

        blue_echo "Installing Node.js version $(cat node-version.txt)..."
        curl -sL https://"$DISTRO".nodesource.com/"$(cat node-version.txt)" | sudo -E bash -
    fi
fi

if [ "$DISTRO" == "deb" ];
then
    sudo $INSTALLER git bc nodejs python-software-properties python g++ make build-essential pkg-config libusb-1.0-0-dev libarchive-zip-perl screen libc6-i386 autoconf automake unzip
fi

if [ "$DISTRO" == "rpm" ];
then
    sudo $INSTALLER git bc nodejs python make automake gcc gcc-c++ kernel-devel libusb glibc.i686 vim-common perl-Archive-Zip-1.58-1.fc24.noarch screen autoconf unzip
fi

if [ "$DISTRO" == "arch" ];
then
    sudo $INSTALLER git bc nodejs npm python gcc make automake libusb lib32-glibc vim yaourt screen autoconf
    yaourt -S perl-archive-zip unzip
fi

if [ "$BASIC_INSTALL" == "true" ];
then
  echo
  green_echo "BASIC INSTALL: Skipping dfu-util, particle-cli, etc."
  echo
else

# Install dfu-util
blue_echo "Installing dfu-util (requires sudo)..."
cd "$BASE_DIR" || exit
git clone https://git.code.sf.net/p/dfu-util/dfu-util
cd dfu-util || exit
git pull
./autogen.sh
./configure
make
sudo make install
cd ..

# Install custom-baud
blue_echo "Installing custom-baud..."
cd "$BINDIR" || exit
curl -fsSLO https://github.com/nrobinson2000/po-util/releases/download/v1.5/custom-baud.zip
unzip -o custom-baud.zip
cd custom-baud || exit
make clean all
cd .. || exit
rm -f custom-baud.zip

# Tracking
SYSTEM_IP="$(curl -sS ipinfo.io/ip)"
KERNEL="$(uname -s)"
curl -sS "https://po-util-tracker.herokuapp.com/install/$USER/$HOSTNAME@$KERNEL/$BASH_VERSION@$SYSTEM_IP" > /dev/null &

GIT_NAME="$(git config --global user.name | sed 's/ /%20/g')"
GIT_EMAIL="$(git config --global user.email)"

if [[ "$GIT_NAME" != "" ]] || [[ "$GIT_EMAIL" != "" ]]; then
  curl -sS "https://po-util-tracker.herokuapp.com/git/$GIT_NAME/$GIT_EMAIL/$BASH_VERSION@$SYSTEM_IP" > /dev/null &
fi

# Install particle-cli
blue_echo "Installing particle-cli..."
sudo npm install -g --unsafe-perm node-pre-gyp npm particle-cli

# Install udev rules file
blue_echo "Installing udev rule (requires sudo) ..."
curl -fsSLO https://raw.githubusercontent.com/nrobinson2000/po-util/master/60-po-util.rules
sudo mv 60-po-util.rules /etc/udev/rules.d/60-po-util.rules

# Install manpage
blue_echo "Installing po manpage..."
curl -fsSLO https://raw.githubusercontent.com/nrobinson2000/homebrew-po/master/man/po.1

[ -d  "/usr/local/share/man/man1/" ] || sudo mkdir "/usr/local/share/man/man1/"

sudo mv po.1 /usr/local/share/man/man1/
sudo mandb &> /dev/null

blue_echo "Adding $USER to plugdev group..."
sudo usermod -a -G plugdev "$USER"

fi

if [ "$NOGIT" == "true" ];
then
  # clone Particle firmware repository
  cd "$FIRMWARE_PARTICLE" || exit
    echo
    blue_echo "Installing Particle firmware from Github..."
    git clone https://github.com/spark/firmware.git

  # clone RedBear DUO firmware repository
  cd "$FIRMWARE_DUO" || exit
    echo
    blue_echo "Installing RedBear Duo firmware from Github..."
    git clone https://github.com/redbear/firmware.git


  # clone Particle-Pi firmware repository
  cd "$FIRMWARE_PI" || exit
    echo
    blue_echo "Installing Particle-Pi firmware from Github..."
    git clone https://github.com/spark/firmware.git
fi

    green_echo "
    Thank you for installing po-util. Be sure to check out https://po-util.com
    if you have any questions, suggestions, comments, or problems. You can use
    the message button in the bottom right corner of the site to send me a
    message. If you need to update po-util just run \"po update\" to download
    the latest versions of po-util, Particle Firmware and particle-cli, or run
    \"po install\" to update all dependencies.
    "
  exit
}

_list()
{
  for device in /dev/ttyACM*;
  do
  if [[ ! -e $device ]]; then
    echo
    red_echo "No devices found!"
    echo
    blue_echo "Your device(s) must be connected by USB."
    echo
    exit
  fi
  done

  blue_echo "
Found the following Particle Devices:
"

  for device in /dev/ttyACM*;
  do
    UDEVINFO="$(udevadm info $device)"
    PLATFORM=$(echo "$UDEVINFO" | grep 'E: ID_MODEL=')
    PLATFORM=$(echo "$PLATFORM" | tail -c +13)
    echo "$(tput bold)$(tput setaf 3)$PLATFORM:$(tput sgr0) $device
    "
  done
  exit
}

_update()
{
    SYSTEM_IP="$(curl -sS ipinfo.io/ip)"
    KERNEL="$(uname -s)"
    curl -sS "https://po-util-tracker.herokuapp.com/update/$USER/$HOSTNAME@$KERNEL/$SYSTEM_IP" > /dev/null &

    if [ "$1" == "duo" ]; # Update just duo firmware
    then
        echo
        blue_echo "Updating RedBear DUO firmware.."
        cd "$FIRMWARE_DUO/firmware" || exit
        git stash
        switch_branch "$BRANCH_DUO" &> /dev/null
        git pull
        echo
        exit
    fi

    if [ "$1" == "firmware" ]; # update just particle firmware
    then
        echo
        blue_echo "Updating Particle firmware..."
        cd "$FIRMWARE_PARTICLE/firmware" || exit
        git stash
        switch_branch &> /dev/null
        git pull
        echo
        exit
    fi

    if [ "$2" == "pi" ]; # update just pi firmware
    then
      echo
      blue_echo "Updating Particle-Pi firmware..."
      cd "$FIRMWARE_PI/firmware" || exit
      git stash
      switch_branch "$BRANCH_PI" &> /dev/null
      git pull
      echo
      exit
    fi

    # update everything if not specified
    echo
    blue_echo "Updating RedBear DUO firmware..."
    cd "$FIRMWARE_DUO/firmware" || exit
    git stash
    switch_branch "$BRANCH_DUO" &> /dev/null
    git pull

    echo
    blue_echo "Updating Particle firmware..."
    cd "$FIRMWARE_PARTICLE/firmware" || exit
    git stash
    switch_branch &> /dev/null
    git pull

    echo
    blue_echo "Updating Particle-Pi firmware..."
    cd "$FIRMWARE_PI/firmware" || exit
    git stash
    switch_branch "$BRANCH_PI" &> /dev/null
    git pull

    echo
    blue_echo "Updating particle-cli..."
    sudo npm update -g particle-cli

    echo
    blue_echo "Updating po-util.."

    sudo rm /usr/local/share/po-common
    sudo curl -fsSLo /usr/local/share/po-common https://raw.githubusercontent.com/nrobinson2000/po/master/share/po-common

    sudo rm /usr/local/share/po-linux
    sudo curl -fsSLo /usr/local/share/po-linux https://raw.githubusercontent.com/nrobinson2000/po/master/share/po-linux

    sudo rm /usr/local/bin/po
    sudo curl -fsSLo /usr/local/bin/po https://raw.githubusercontent.com/nrobinson2000/po/master/bin/po
    sudo chmod +x /usr/local/bin/po

    rm -f ~/.po-util/doc/po-util-README.md
    curl -fsSLo ~/.po-util/doc/po-util-README.md https://raw.githubusercontent.com/nrobinson2000/po-util/master/po-util-README.md

    curl -fsSLO https://raw.githubusercontent.com/nrobinson2000/homebrew-po/master/man/po.1
    sudo mv po.1 /usr/local/share/man/man1/
    sudo mandb &> /dev/null

    echo
    exit
}

_stty="custom-baud"

# Configuration file is created at "~/.po-util/config"
SETTINGS=~/.po-util/config
BASE_DIR=~/.po-util/src
FIRMWARE_PARTICLE=$BASE_DIR/particle
FIRMWARE_DUO=$BASE_DIR/redbearduo
FIRMWARE_PI=$BASE_DIR/pi
BRANCH="release/stable"
BRANCH_DUO="duo"
BRANCH_PI="feature/raspberry-pi"
BINDIR=~/.po-util/bin
DFUBAUDRATE=14400
CWD="$PWD" # Global Current Working Directory variable

for modem in /dev/ttyACM*
do
  MODEM="$modem"
  MODEM_DUO="$modem"
done

GCC_ARM_VER=gcc-arm-none-eabi-5_3-2016q1 # Updated to 5.3
GCC_ARM_URL=https://developer.arm.com/-/media/Files/downloads/gnu-rm/5_3-2016q1/gccarmnoneeabi532016q120160330linuxtar.bz2
GCC_ARM_PATH=$BINDIR/gcc-arm-embedded/$GCC_ARM_VER/bin/
CUSTOM_BAUD_PATH=$BINDIR/custom-baud
PATH="$PATH:$GCC_ARM_PATH"
PATH="$PATH:$CUSTOM_BAUD_PATH"
